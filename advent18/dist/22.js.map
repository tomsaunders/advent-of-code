{"version":3,"file":"22.js","sourceRoot":"","sources":["../22.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\n\nconst ROCKY = \".\";\nconst WET = \"=\";\nconst NARROW = \"|\";\nconst MOUTH = \"M\";\nconst TARGET = \"T\";\n\nconst TORCH = \"H\";\nconst GEAR = \"G\";\nconst NEITHER = \"O\"; //k\n\n// INPUT\n// const depth = 4080;\n// const target = [14, 785];\n\n// TEST\nconst depth = 510;\nconst target = [10, 10];\n\nclass Cave {\n  public cells: Cell[][];\n  public constructor(public depth: number, public targetX: number, public targetY: number) {\n    this.cells = [];\n    let risk = 0;\n\n    for (let y = 0; y <= targetY + 5; y++) {\n      this.cells.push([]);\n      for (let x = 0; x <= targetX + 5; x++) {\n        const cell = new Cell(x, y, this);\n        this.cells[y].push(cell);\n        risk += cell.risk;\n      }\n    }\n    this.print();\n  }\n\n  public getCell(x: number, y: number): Cell | undefined {\n    if (!this.cells[y] || !this.cells[y][x]) {\n      return undefined;\n    }\n    return this.cells[y][x];\n  }\n\n  public getMove(cell: Cell, cost: number, tool: string) {\n    // todo cache??\n    return new Move(cell, cost, tool);\n  }\n\n  public print(): void {\n    const out = [];\n    for (const row of this.cells) {\n      let r = [];\n      for (const cell of row) {\n        r.push(cell.icon);\n      }\n      out.push(r.join(\"\"));\n    }\n    out.push(\"\");\n    console.log(out.join(\"\\n\"));\n  }\n}\n\nclass Cell {\n  public geologic: number;\n\n  public get erosion(): number {\n    return (this.geologic + this.cave.depth) % 20183;\n  }\n\n  public get type(): string {\n    switch (this.erosion % 3) {\n      case 0:\n        return ROCKY;\n      case 1:\n        return WET;\n      case 2:\n        return NARROW;\n    }\n    return \"\";\n  }\n\n  public get icon(): string {\n    if (this.x === 0 && this.y === 0) {\n      return MOUTH;\n    } else if (this.x === this.cave.targetX && this.y === this.cave.targetY) {\n      return TARGET;\n    }\n    return this.type;\n  }\n\n  public get risk(): number {\n    return this.erosion % 3;\n  }\n\n  public constructor(public x: number, public y: number, public cave: Cave) {\n    let g = 0;\n    if (this.x === 0 && this.y === 0) {\n      g = 0;\n    } else if (this.x === this.cave.targetX && this.y === this.cave.targetY) {\n      g = 0;\n    } else if (this.y === 0) {\n      g = this.x * 16807;\n    } else if (this.x === 0) {\n      g = this.y * 48271;\n    } else {\n      g = this.cave.getCell(this.x - 1, this.y)!!.erosion * this.cave.getCell(this.x, this.y - 1)!!.erosion;\n    }\n    this.geologic = g;\n  }\n\n  public canAccess(tool: string): boolean {\n    switch (this.erosion % 3) {\n      case 0:\n        return tool === GEAR || tool === TORCH;\n      case 1:\n        return tool === GEAR || tool === NEITHER;\n      case 2:\n        return tool === TORCH || tool === NEITHER;\n    }\n    return false;\n  }\n\n  public get validTools(): string[] {\n    switch (this.erosion % 3) {\n      case 0:\n        return [TORCH, GEAR];\n      case 1:\n        return [GEAR, NEITHER];\n      case 2:\n        return [TORCH, NEITHER];\n    }\n    return [];\n  }\n\n  public toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  public equals(other: Cell): boolean {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  public get d(): string {\n    const t = this.validTools.join(\",\");\n    return `${this.icon} @ ${this.toString()} (${t})`;\n  }\n}\n\nclass Move {\n  public get neighbours(): Move[] {\n    const moves: Move[] = [];\n\n    const cave = this.cell.cave;\n    const x = this.cell.x;\n    const y = this.cell.y;\n\n    const cells = [cave.getCell(x, y + 1), cave.getCell(x + 1, y), cave.getCell(x, y - 1), cave.getCell(x - 1, y)];\n    for (const cell of cells) {\n      if (!cell) {\n        continue;\n      }\n      if (cell.canAccess(this.tool)) {\n        moves.push(cave.getMove(cell, 1, this.tool));\n      } else {\n        for (const valid of cell.validTools) {\n          moves.push(cave.getMove(cell, 7, valid));\n        }\n      }\n    }\n\n    return moves;\n  }\n  public constructor(public cell: Cell, public cost: number, public tool: string) {}\n\n  public dist(other: Move) {\n    return Math.abs(this.cell.y - other.cell.y) + Math.abs(this.cell.x - other.cell.x);\n  }\n\n  public canAccess(other: Move) {\n    return other.cell.canAccess(this.tool);\n  }\n\n  public heuristic(other: Move) {\n    const dist = this.dist(goal); // optimistic manhattan\n    if (!this.canAccess(goal)) {\n      // cant access with the current tool, would have to switch at least once\n      return dist + 7;\n    }\n    {\n      return dist;\n    }\n  }\n\n  public toString(): string {\n    return `Moving to ${this.cell.d} with ${this.tool} and cost ${this.cost}\\n`;\n  }\n\n  public equals(other: Move) {\n    return this.cell.equals(other.cell) && this.tool === other.tool;\n  }\n\n  public get key(): string {\n    return `${this.cell} - ${this.tool}`;\n  }\n}\n\nclass MoveSet {\n  public arr: Move[] = [];\n\n  public add(value: Move): this {\n    let found = this.has(value);\n\n    if (!found) {\n      this.arr.push(value);\n    }\n\n    return this;\n  }\n\n  public has(value: Move): boolean {\n    let found = false;\n    this.arr.forEach((move) => {\n      if (move.equals(value)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n\n  public delete(value: Move): this {\n    this.arr = this.arr.filter((move) => !move.equals(value));\n    return this;\n  }\n\n  public get size(): number {\n    return this.arr.length;\n  }\n}\n\nclass MoveMap {\n  public keyMap: Map<string, Move> = new Map<string, Move>();\n  public objMap: Map<string, Move> = new Map<string, Move>();\n\n  public set(key: Move, value: any) {}\n}\n\nconst tx = target[0];\nconst ty = target[1];\nconst cave = new Cave(depth, tx, ty);\n\nconst start = new Move(cave.getCell(0, 0)!!, 0, TORCH);\nconst goal = new Move(cave.getCell(tx, ty)!!, 1, TORCH);\n\nclass Path {\n  public arr: Move[] = [];\n  public get end(): Move {\n    return this.arr[this.arr.length - 1];\n  }\n  public get heuristic(): number {\n    return this.end.dist(this.goal);\n  }\n  public get score(): number {\n    return this.arr.reduce((cost: number, move: Move) => cost + move.cost, 0);\n  }\n  public get goalScore(): number {\n    let score = this.score;\n    if (this.end.tool !== TORCH) {\n      score += 7;\n    }\n    return score;\n  }\n  public get optimistic(): number {\n    return this.score + this.end.heuristic(this.goal);\n  }\n  public get short(): string {\n    let prevTool = \"\";\n    let out = `${this.arr.length} move path with cost ${this.score}\\n `;\n    for (const move of this.arr) {\n      let c = \"\";\n      if (prevTool !== move.tool) {\n        prevTool = move.tool;\n        c = move.tool + \" \";\n      }\n      c += `(${move.cell.x},${move.cell.y})`;\n      out += c;\n    }\n    return out;\n  }\n\n  public get vshort(): string {\n    return `${this.arr.length} move path with cost ${this.score}`;\n  }\n\n  public constructor(public start: Move, public goal: Move) {\n    this.arr.push(start);\n  }\n\n  public toString(): string {\n    return `${this.arr.length} move path with cost ${this.score}\\n` + this.arr.join(\"->\");\n  }\n\n  public move(next: Move): Path | undefined {\n    let found = false;\n    this.arr.forEach((move) => {\n      if (move.equals(next)) {\n        found = true;\n      }\n    });\n    if (found) {\n      return undefined;\n    }\n\n    const np = new Path(this.start, this.goal);\n    np.arr = [...this.arr, next];\n    return np;\n  }\n}\nconst nav = (start: Move, goal: Move): Path[] => {\n  const closed = new Set();\n  const open = new Set();\n  open.add(new Path(start, goal));\n  const prev = new Map<string, number>();\n  prev.set(start.key, 0);\n\n  const getNext = (open: Set<Path>): Path => {\n    let min = 9999;\n    let mm: Path;\n    open.forEach((path) => {\n      // console.log(`${path}`);\n      const value = path.heuristic;\n      if (value < min) {\n        mm = path;\n        min = value;\n      }\n    });\n    return mm!!;\n  };\n\n  let e = 0;\n  let minFound = 1788;\n  let paths: Path[] = [];\n\n  while (open.size) {\n    e++;\n    const path = getNext(open) as Path;\n    // console.log(`${e} ${path} ...  H ${path.heuristic} M ${minFound}`);\n    const current = path.end;\n\n    open.delete(path);\n    closed.add(path);\n\n    if (current.cell.equals(goal.cell)) {\n      let score = path.goalScore;\n      if (score < minFound) {\n        minFound = score;\n      }\n      paths.push(path);\n      continue;\n    }\n\n    for (const n of current.neighbours) {\n      const np = path.move(n);\n\n      if (!np || closed.has(np)) {\n        continue;\n      }\n\n      const previousToHere = prev.has(n.key) ? prev.get(n.key)!! : 9999;\n      if (np.optimistic < minFound && np.score < previousToHere) {\n        open.add(np);\n        prev.set(n.key, np.score);\n      }\n    }\n  }\n\n  return paths;\n};\n\nconst paths = nav(start, goal);\npaths.forEach((path: Path) => {\n  console.log(`${path.vshort} To goal ${path.goalScore}`);\n});\n"]}