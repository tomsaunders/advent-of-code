{"version":3,"file":"18.js","sourceRoot":"","sources":["../18.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env npx ts-node\nimport * as fs from \"fs\";\nconst input = fs.readFileSync(\"input18.txt\", \"utf8\");\nconst test = `.#.#...|#.\n.....#|##|\n.|..|...#.\n..|#.....#\n#.#|||#|#|\n...#.||...\n.|....|...\n||...#|.#|\n|.||||..|.\n...#.|..|.`;\n\nconst size = 50;\n\nconst OPEN = \".\";\nconst TREE = \"|\";\nconst YARD = \"#\";\n\nclass Cell {\n  public next: string = \"\";\n\n  public get neighbours(): Cell[] {\n    const ns = [];\n    for (let dy = -1; dy < 2; dy++) {\n      for (let dx = -1; dx < 2; dx++) {\n        if (dy !== 0 || dx !== 0) {\n          const n = this.grid.getCell(this.x + dx, this.y + dy);\n          if (n) {\n            ns.push(n);\n          }\n        }\n      }\n    }\n    return ns;\n  }\n\n  public constructor(public x: number, public y: number, public icon: string, public grid: Grid) {}\n\n  public move(): void {\n    const neighbours = this.neighbours;\n    // console.log(\"moving \" + this, \" ... neighbours are\" + neighbours.join(\" : \"));\n    const trees = neighbours.filter(n => n.icon === TREE).length;\n    const yards = neighbours.filter(n => n.icon === YARD).length;\n    // const opens = neighbours.filter(n => n.icon === OPEN).length;\n    // console.log(\"there are \", trees, \" trees and \", yards, \" yards out of \", neighbours.length);\n\n    this.next = this.icon;\n    if (this.icon === OPEN && trees >= 3) {\n      this.next = TREE;\n    } else if (this.icon === TREE && yards >= 3) {\n      this.next = YARD;\n    } else if (this.icon === YARD) {\n      if (yards >= 1 && trees >= 1) {\n        // stay\n        this.next = YARD;\n      } else {\n        this.next = OPEN;\n      }\n    }\n    // console.log(\"moving from \", this.icon, \" to \", this.next);\n  }\n\n  public toString(): string {\n    return `${this.icon}@ ${this.x},${this.y}`;\n  }\n}\n\nclass Grid {\n  public arr: Cell[][] = [];\n  public cells: Cell[] = [];\n  public minutes = 0;\n  public areadySeen = new Map<number, number>();\n  public get score(): number {\n    const trees = this.cells.filter(n => n.icon === TREE).length;\n    const yards = this.cells.filter(n => n.icon === YARD).length;\n    return trees * yards;\n  }\n\n  public constructor(lines: string[]) {\n    this.arr = [];\n    for (let y = 0; y < lines.length; y++) {\n      const row: Cell[] = [];\n      const line = lines[y];\n      for (let x = 0; x < line.length; x++) {\n        const cell = new Cell(x, y, line[x], this);\n        this.cells.push(cell);\n        row.push(cell);\n      }\n      this.arr.push(row);\n    }\n  }\n\n  public getCell(x: number, y: number) {\n    if (this.arr[y] && this.arr[y][x]) {\n      return this.arr[y][x];\n    } else {\n      return null;\n    }\n  }\n\n  public play(count: number, part2: boolean = false): void {\n    while (this.minutes < count) {\n      this.cells.forEach(cell => cell.move());\n      this.cells.forEach(cell => (cell.icon = cell.next));\n      this.minutes++;\n      if (part2) {\n        const score = this.score;\n        if (this.minutes > 1000 && this.minutes < 3000) {\n          if (this.areadySeen.has(score)) {\n            const wasAt = this.areadySeen.get(score) as number;\n            const diff = this.minutes - wasAt;\n            const toGo = count - this.minutes;\n            const fullRoundsToSkip = Math.floor(toGo / diff) * diff;\n            this.minutes += fullRoundsToSkip;\n          } else {\n            this.areadySeen.set(score, this.minutes);\n          }\n        }\n      } else {\n        this.p();\n      }\n    }\n  }\n\n  public p(): void {\n    let out = `After ${this.minutes} minutes:\\n`;\n    for (const row of this.arr) {\n      for (const cell of row) {\n        out += cell.icon;\n      }\n      out += \"\\n\";\n    }\n    out += \"\\n\";\n    console.log(out);\n  }\n}\n\nconst testGrid = new Grid(test.split(\"\\n\"));\n// testGrid.p();\ntestGrid.play(10);\nconsole.log(\"Final score test\", testGrid.score);\n\nlet grid = new Grid(input.split(\"\\n\"));\n// grid.p();\ngrid.play(10);\nconsole.log(\"Final score part 1\", grid.score);\n\ngrid = new Grid(input.split(\"\\n\"));\n// grid.p();\ngrid.play(1000000000, true);\nconsole.log(\"Final score part 2\", grid.score);\n\ngrid = new Grid(input.split(\"\\n\"));\ngrid.play(1000);\n"]}