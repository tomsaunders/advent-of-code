{"version":3,"file":"23.js","sourceRoot":"","sources":["../23.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env npx ts-node\nimport * as fs from \"fs\";\nconst input = fs.readFileSync(\"input23.txt\", \"utf8\");\nconst test = `pos=<0,0,0>, r=4\npos=<1,0,0>, r=1\npos=<4,0,0>, r=3\npos=<0,2,0>, r=1\npos=<0,5,0>, r=3\npos=<0,0,3>, r=1\npos=<1,1,1>, r=1\npos=<1,1,2>, r=1\npos=<1,3,1>, r=1`;\n\nconst test2 = `pos=<10,12,12>, r=2\npos=<12,14,12>, r=2\npos=<16,12,12>, r=4\npos=<14,14,14>, r=6\npos=<50,50,50>, r=200\npos=<10,10,10>, r=5`;\n\n// const lines = test2.split(\"\\n\");\nconst lines = input.split(\"\\n\");\n\nclass Nanobot {\n  public constructor(public x: number, public y: number, public z: number, public radius: number) {}\n\n  public canSee(other: Nanobot): boolean {\n    return this.dist(other.z, other.y, other.x) <= this.radius;\n  }\n\n  public dist(z: number, y: number, x: number): number {\n    return Math.abs(this.y - y) + Math.abs(this.x - x) + Math.abs(this.z - z);\n  }\n\n  public toString(): string {\n    return `${this.x},${this.y},${this.z} r${this.radius}`;\n  }\n}\n\nconst bots = [];\nlet big = 0;\nlet b: Nanobot;\n\n// let maxY = 0;\n// let minY = 0;\n// let maxX = 0;\n// let minX = 0;\n// let minZ = 0;\n// let maxZ = 0;\n\nfor (let line of lines) {\n  line = line\n    .replace(\"pos=<\", \"\")\n    .replace(\">\", \"\")\n    .replace(\" r=\", \"\");\n  const [x, y, z, radius] = line.split(\",\").map((value) => parseInt(value, 10));\n  const bot = new Nanobot(x, y, z, radius);\n  bots.push(bot);\n  if (radius > big) {\n    big = radius;\n    b = bot;\n  }\n  // maxY = Math.max(maxY, y);\n  // minY = Math.min(minY, y);\n  // maxX = Math.max(maxX, x);\n  // minX = Math.min(minX, x);\n  // minZ = Math.min(minZ, z);\n  // maxZ = Math.max(maxZ, z);\n}\n\nconst inRange = bots.filter((bot) => {\n  return b.canSee(bot);\n});\n\nconst key = (x: number, y: number, z: number): string => {\n  return [x, y, z].join(\":\");\n};\n\nconst cells = new Map<string, number>();\n\nlet max = 0;\nlet m = \"\";\nlet i = 0;\nfor (const bot of bots) {\n  const r = bot.radius;\n  console.log(`Checking ${i} ${bot}`);\n\n  for (let z = bot.z - r; z <= bot.z + r; z++) {\n    for (let y = bot.y - r; y <= bot.y + r; y++) {\n      for (let x = bot.x - r; x <= bot.x + r; x++) {\n        if (bot.dist(z, y, z) <= r) {\n          const k = key(x, y, z);\n          const count = cells.has(k) ? cells.get(k)!! + 1 : 1;\n          cells.set(k, count);\n          if (count > max) {\n            max = count;\n            m = k;\n          }\n        }\n      }\n    }\n  }\n  i++;\n}\n\nconsole.log(`${max} at ${m}`);\n"]}