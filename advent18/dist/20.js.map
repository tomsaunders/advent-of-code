{"version":3,"file":"20.js","sourceRoot":"","sources":["../20.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env npx ts-node\nimport * as fs from \"fs\";\nimport { stringify } from \"querystring\";\nconst input = fs\n  .readFileSync(\"input20.txt\", \"utf8\")\n  .replace(\"^\", \"\")\n  .replace(\"$\", \"\");\nconst test = `#####\n#.|.#\n#-###\n#.|X#\n#####`;\n\nconst ROOM = \".\";\nconst WALL = \"#\";\nconst DOOR = \"|\";\nconst DOOR2 = \"-\";\nconst POS = \"X\";\nconst UNK = \"?\";\n\nfunction key(x: number, y: number) {\n  return `${x}:${y}`;\n}\n\nclass Grid {\n  public cells: Map<string, Cell>;\n\n  public minY: number = 9;\n  public minX: number = 9;\n  public maxY: number = 0;\n  public maxX: number = 0;\n  public get yRange(): number {\n    return this.maxY - this.minY;\n  }\n  public get xRange(): number {\n    return this.maxX - this.minX;\n  }\n\n  public constructor() {\n    this.cells = new Map<string, Cell>();\n  }\n\n  public getCell(x: number, y: number) {\n    const k = key(x, y);\n    if (!this.cells.has(k)) {\n      const cell = new Cell(x, y, this);\n      this.cells.set(cell.key, cell);\n      // console.log(\"making cell at \", k);\n      this.maxX = Math.max(this.maxX, x);\n      this.maxY = Math.max(this.maxY, y);\n      this.minX = Math.min(this.minX, x);\n      this.minY = Math.min(this.minY, y);\n    }\n    return this.cells.get(k) as Cell;\n  }\n\n  public finish(): void {\n    let max = 0;\n    let thouCount = 0;\n    this.cells.forEach((cell) => {\n      if (cell.i === UNK) cell.icon(WALL);\n      if (cell.i === ROOM) {\n        max = Math.max(cell.dist, max);\n        if (cell.dist >= 1000) thouCount++;\n      }\n    });\n    console.log(\"Maximum distance is\", max);\n    console.log(\"Exceed 1000:\", thouCount); //8580 too low\n  }\n}\n\nclass Cell {\n  public get key(): string {\n    return key(this.x, this.y);\n  }\n  private _up: Cell | undefined;\n  public get up(): Cell {\n    if (!this._up) {\n      const up = this.map.getCell(this.x, this.y - 1);\n      up.down = this;\n      this._up = up;\n    }\n    return this._up;\n  }\n  public set up(cell) {\n    this._up = cell;\n  }\n  public get hasUp(): boolean {\n    return !!this._up;\n  }\n\n  private _down: Cell | undefined;\n  public get down(): Cell {\n    if (!this._down) {\n      const down = this.map.getCell(this.x, this.y + 1);\n      down.up = this;\n      this._down = down;\n    }\n    return this._down;\n  }\n  public set down(cell) {\n    this._down = cell;\n  }\n  public get hasDown(): boolean {\n    return !!this._down;\n  }\n\n  private _left: Cell | undefined;\n  public get left(): Cell {\n    if (!this._left) {\n      const left = this.map.getCell(this.x - 1, this.y);\n      left.right = this;\n      this._left = left;\n    }\n    return this._left;\n  }\n  public set left(cell) {\n    this._left = cell;\n  }\n  public get hasLeft(): boolean {\n    return !!this._left;\n  }\n\n  private _right: Cell | undefined;\n  public get right(): Cell {\n    // console.log(\"cell right\");\n    if (!this._right) {\n      const right = this.map.getCell(this.x + 1, this.y);\n      right.left = this;\n      this._right = right;\n    }\n    return this._right;\n  }\n  public set right(cell) {\n    this._right = cell;\n  }\n  public get hasRight(): boolean {\n    return !!this._right;\n  }\n\n  public get isDoor(): boolean {\n    return this.i === DOOR || this.i === DOOR2;\n  }\n\n  public i: string = UNK;\n  public dist: number = 99999;\n\n  public constructor(public x: number, public y: number, public map: Grid) {}\n\n  public icon(i: string): this {\n    this.i = i;\n    return this;\n  }\n\n  public wall(): this {\n    return this.icon(WALL);\n  }\n\n  public room(oldDist: number): this {\n    this.map.getCell(this.x - 1, this.y - 1).wall();\n    this.map.getCell(this.x + 1, this.y - 1).wall();\n    this.map.getCell(this.x - 1, this.y + 1).wall();\n    this.map.getCell(this.x + 1, this.y + 1).wall();\n    this.left;\n    this.right;\n    this.up;\n    this.down;\n    this.dist = Math.min(this.dist, oldDist + 1);\n\n    return this.icon(ROOM);\n  }\n\n  public follow(regex: string[], context: Cell[] = []): void {\n    // console.log(\"following \", regex);\n    let current = this as Cell;\n    while (regex.length) {\n      // console.log(\"\\n\", regex.join(\"\"), \"context \", context.map((cell) => cell.key).join(\", \"));\n      print(this.map);\n      let c = regex.shift() as string;\n      if (c.match(/[NSEW]/)) {\n        current = current.move(c);\n        // console.log(\"match \", c, \" now \", current.key);\n      } else if (c === \"(\") {\n        context = [...context, current];\n        // console.log(\"new branch from \", current.key);\n      } else if (c === \"|\") {\n        const last = context.pop() as Cell;\n        // console.log(\"switch - back to \", last.key);\n        last.follow([...regex], [...context, last]);\n        // skip ahead until we're at the correct depth for this path\n        // console.log(\"skipping ahead from \", regex.length);\n        let depth = 1;\n        while (depth) {\n          let d = regex.shift() as string;\n          if (d === \"(\") depth++;\n          if (d === \")\") depth--;\n        }\n        // console.log(\"to \", regex.length);\n      } else if (c === \")\") {\n        // console.log(\"pop)\");\n        context.pop();\n      }\n    }\n  }\n\n  public cheat(regex: string[]): void {\n    let current = this as Cell;\n    let stack: Cell[] = [current];\n    for (const c of regex) {\n      print(this.map);\n      if (c.match(/[NSEW]/)) {\n        current = current.move(c);\n      } else if (c === \"(\") {\n        stack.push(current);\n      } else if (c === \")\") {\n        current = stack.pop() as Cell;\n      } else if (c === \"|\") {\n        current = stack[stack.length - 1];\n      }\n    }\n  }\n\n  public move(dir: string): Cell {\n    switch (dir) {\n      case \"N\":\n        return this.upDoor();\n      case \"E\":\n        // console.log(\"move e\");\n        return this.rightDoor();\n      case \"S\":\n        return this.downDoor();\n      case \"W\":\n        return this.leftDoor();\n    }\n    return this; // just to shut up TypeScript\n  }\n\n  public upDoor(): Cell {\n    const door = this.up.icon(DOOR2);\n    door.left.wall();\n    door.right.wall();\n    return door.up.room(this.dist);\n  }\n\n  public downDoor(): Cell {\n    const door = this.down.icon(DOOR2);\n    door.left.wall();\n    door.right.wall();\n    return door.down.room(this.dist);\n  }\n\n  public leftDoor(): Cell {\n    const door = this.left.icon(DOOR);\n    door.up.wall();\n    door.down.wall();\n    return door.left.room(this.dist);\n  }\n\n  public rightDoor(): Cell {\n    const door = this.right.icon(DOOR);\n    door.up.wall();\n    door.down.wall();\n    return door.right.room(this.dist);\n  }\n}\n\nfunction print(map: Grid) {\n  let out: string[][] = [];\n  for (let y = 0; y <= map.yRange; y++) {\n    let row = [];\n    for (let x = 0; x <= map.xRange; x++) {\n      row.push(\" \");\n    }\n    out.push(row);\n  }\n  map.cells.forEach((cell) => {\n    let x = cell.x - map.minX;\n    let y = cell.y - map.minY;\n    out[y][x] = cell.i;\n  });\n  out.unshift([]);\n  out.push([]);\n  console.log(out.map((row) => row.join(\"\")).join(\"\\n\"));\n}\n\nconst tests = [\n  \"^WNE$\",\n  \"ENWWW(NEEE|SSE(EE|N))\",\n  \"ENNWSWW(NEWS|)SSSEEN(WNSE|)EE(SWEN|)NNN\",\n  \"^ESSWWN(E|NNENN(EESS(WNSE|)SSS|WWWSSSSE(SW|NNNE)))$\",\n  \"^WSSEESWWWNW(S|NENNEEEENN(ESSSSW(NWSW|SSEN)|WSWWN(E|WWS(E|SS))))$\",\n  input\n];\nfor (let test of tests) {\n  test = test.replace(\"^\", \"\").replace(\"$\", \"\");\n  console.log(test.substr(0, 100));\n  const map = new Grid();\n  const start = map\n    .getCell(0, 0)\n    .room(0)\n    .icon(POS);\n  start.dist = 0;\n  start.cheat(test.split(\"\"));\n  map.finish();\n  // print(map);\n}\n"]}